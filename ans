1.Vertical Order traversal of Binary Tree

public class Solution {
       static class Pair{
        TreeNode t;
        int x;
        Pair(TreeNode t,int x)
        {
            this.t=t;
            this.x=x;
        }
    }
   
    public ArrayList<ArrayList<Integer>> verticalOrderTraversal(TreeNode A) {
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        Map<Integer,ArrayList<Integer>> map = new TreeMap<>();
        if(A ==null)
        {
            return ans;
        }
        Queue<Pair>q=new LinkedList<Pair>();
        q.add(new Pair(A,0));
        
        while(!q.isEmpty()){
            Pair front = q.poll();
            TreeNode node = front.t;
            int dist = front.x;
            
            if(map.containsKey(dist)){
                 map.get(dist).add(node.val);
            }else{
                map.put(dist,new ArrayList<>());
                map.get(dist).add(node.val);
            }
           
            
            if(node.left!=null){
                q.add(new Pair(node.left,dist-1));
            }
            if(node.right!=null){
                 q.add(new Pair(node.right,dist+1));
            }
        }
        for (Map.Entry<Integer,ArrayList<Integer>> entry : map.entrySet()) {
            ans.add(entry.getValue());
        }
        return ans;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Binary Tree Right Side View

class Solution {
    public void helper(List<Integer> ans,TreeNode root,int depth){
        if(root==null)return;
        if(ans.size()==depth)ans.add(root.val);
         helper(ans,root.right,depth+1);
         helper(ans,root.left,depth+1);
    }
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> ans= new ArrayList<>();
        // helper(ans,root,0);
          if(root == null)
            return ans;
        Queue<TreeNode> que = new LinkedList();
        que.add(root);
        while(!que.isEmpty()){
            int size = que.size();
            while(size>0){
                TreeNode node = que.poll();
                if(size==1)
                    ans.add(node.val);
                if(node.left != null)
                    que.add(node.left);
                if(node.right != null)
                    que.add(node.right);
                size--;
            }
        }
        return ans;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Left View of Binary Tree

class Tree
{
    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root)
    {
     ArrayList<Integer> ans= new ArrayList<>();
        if(root == null)
            return ans;
            
        Queue<Node> que = new LinkedList();
        que.add(root);
        while(!que.isEmpty()){
            int size = que.size();
            while(size>0){
                Node node = que.poll();
                if(size==1)
                    ans.add(node.data);
                if(node.right != null)
                    que.add(node.right);
                if(node.left != null)
                    que.add(node.left);
                size--;
            }
        }
        return ans;        
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Top View of Binary Tree

class Solution
{
     static class Pair{
        Node t;
        int x;
        Pair(Node t,int x)
        {
            this.t=t;
            this.x=x;
        }
    }
    static ArrayList<Integer> topView(Node root)
    {
        
        int  min = Integer.MAX_VALUE , max = Integer.MIN_VALUE;
        
        ArrayList<Integer> ans = new ArrayList<>();
         if(root==null)
        {
            return ans;
        }
        Map<Integer, ArrayList<Integer>> map = new TreeMap<>();
        
        Queue<Pair> q = new LinkedList<>();
        
        q.add(new Pair(root,0));
        
        while(!q.isEmpty()){
            Pair front = q.poll();
            
            Node node = front.t;
            int dist = front.x;
            min=Math.min(dist,min);
            max=Math.max(dist,max);
            if(!map.containsKey(dist)){
                map.put(dist,new ArrayList<>());
            }
            map.get(dist).add(node.data);
            
            if(node.left!=null){
                q.add(new Pair(node.left,dist-1));
            }
            
            if(node.right!=null){
                q.add(new Pair(node.right,dist+1));
            }
            
        }
        for(int i=min;i<=max;i++){
            ans.add(map.get(i).get(0));
        }
        return ans;
 }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.Bottom View of Binary Tree

class Solution
{
     static class Pair{
        Node t;
        int x;
        Pair(Node t,int x)
        {
            this.t=t;
            this.x=x;
        }
    }
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        
        int  min = Integer.MAX_VALUE , max = Integer.MIN_VALUE;
        
        ArrayList<Integer> ans = new ArrayList<>();
         if(root==null)
        {
            return ans;
        }
        Map<Integer, ArrayList<Integer>> map = new TreeMap<>();
        
        Queue<Pair> q = new LinkedList<>();
        
        q.add(new Pair(root,0));
        
        while(!q.isEmpty()){
            Pair front = q.poll();
            
            Node node = front.t;
            int dist = front.x;
            min=Math.min(dist,min);
            max=Math.max(dist,max);
            if(!map.containsKey(dist)){
                map.put(dist,new ArrayList<>());
            }
            map.get(dist).add(node.data);
            
            if(node.left!=null){
                q.add(new Pair(node.left,dist-1));
            }
            
            if(node.right!=null){
                q.add(new Pair(node.right,dist+1));
            }
            
        }
        for(int i=min;i<=max;i++){
            int size = map.get(i).size(); 
            ans.add(map.get(i).get(size-1));
        }
        return ans;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. Construct Binary Tree from Preorder and Inorder Traversal

class Solution {
    public TreeNode buildTree(int[] preorder, int preStart, int preEnd, int[]
  inorder, int inStart, int inEnd, Map < Integer, Integer > inMap){
        if (preStart > preEnd || inStart > inEnd) return null;

    TreeNode root = new TreeNode(preorder[preStart]);
    int inRoot = inMap.get(root.val);
    int numsLeft = inRoot - inStart;

    root.left = buildTree(preorder, preStart + 1, preStart + numsLeft, inorder, 
    inStart, inRoot - 1, inMap);
    root.right = buildTree(preorder, preStart + numsLeft + 1, preEnd, inorder, 
    inRoot + 1, inEnd, inMap);

    return root;
    }
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        
    Map < Integer, Integer > inMap = new HashMap < Integer, Integer > ();

    for (int i = 0; i < inorder.length; i++) {
      inMap.put(inorder[i], i);
    }

    TreeNode root = buildTree(preorder, 0, preorder.length - 1, inorder, 0, 
    inorder.length - 1, inMap);
    return root;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. Construct Binary Tree from Inorder and Postorder Traversal
class Solution {

    public TreeNode buildTree(int[] postorder, int postStart, int postEnd, int[] inorder, int inStart, int inEnd,
            Map<Integer, Integer> inMap) {

        if (inStart > inEnd || postStart > postEnd) {
            return null;
        }

        TreeNode root = new TreeNode(postorder[postEnd]);
        int inRoot = inMap.get(root.val);
        int leftSize = inRoot - inStart;
      
        root.left = buildTree(postorder, postStart, postStart + leftSize - 1, inorder, inStart, inRoot - 1, inMap);
        root.right = buildTree(postorder, postStart + leftSize, postEnd - 1, inorder, inRoot + 1, inEnd, inMap);
        return root;
    }

    public TreeNode buildTree(int[] inorder, int[] postorder) {
        Map<Integer, Integer> inMap = new HashMap<Integer, Integer>();

        for (int i = 0; i < inorder.length; i++) {
            inMap.put(inorder[i], i);
        }

        TreeNode root = buildTree(postorder, 0, postorder.length - 1, inorder, 0,
                inorder.length - 1, inMap);
        return root;
    }
}
